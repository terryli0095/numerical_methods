%matplotlib inline
import numpy
import matplotlib.pyplot as plt
import scipy
from scipy import special
import sympy 


def secant(x_0, f, tolerance):
    """Find the zeros of the given function f using the secant method
    
    :Input:
     - *M_0* (float) - Initial bracket
     - *f* (function) - The function that will be analyzed
     - *tolerance* (float) - Stopping tolerance for iteration
     
    :Output:
    If the iteration was successful the return values are:
     - *M* (float) - Zero found via the given intial iterate.
     - *n* (int) - Number of iterations it took to achieve the specified
       tolerance.
    otherwise
     - *M* (float) - Last iterate found
     - *n* (int) - *n = -1*
    """
    
    # Parameters
    MAX_STEPS = 1000
    x_km=x_0[0] #setting the brackets
    x_k=x_0[1] 
    # INSERT CODE HERE
    if numpy.abs(f(x_k)) < TOLERANCE:
        return x,0
    for n in xrange(1,MAX_STEPS+1):
        x_kp = x_k - f(x_k) * (x_k-x_km) / (f(x_k) - f(x_km))  #secant iteration
        x_km = x_k
        x_k = x_kp
        if numpy.abs(f(x_k)) < TOLERANCE:
             break  


    return x_k, n
